
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Subscription` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Subscription
 * 
 */
export type SubscriptionModel = runtime.Types.Result.DefaultSelection<Prisma.$SubscriptionPayload>

export type AggregateSubscription = {
  _count: SubscriptionCountAggregateOutputType | null
  _min: SubscriptionMinAggregateOutputType | null
  _max: SubscriptionMaxAggregateOutputType | null
}

export type SubscriptionMinAggregateOutputType = {
  id: string | null
  polarCheckoutId: string | null
  polarSubscriptionId: string | null
  polarCustomerId: string | null
  status: string | null
  currentPeriodStart: Date | null
  currentPeriodEnd: Date | null
  cancelledAt: Date | null
  createdAt: Date | null
  updatedAt: Date | null
  userId: string | null
  organizationId: string | null
  productId: string | null
}

export type SubscriptionMaxAggregateOutputType = {
  id: string | null
  polarCheckoutId: string | null
  polarSubscriptionId: string | null
  polarCustomerId: string | null
  status: string | null
  currentPeriodStart: Date | null
  currentPeriodEnd: Date | null
  cancelledAt: Date | null
  createdAt: Date | null
  updatedAt: Date | null
  userId: string | null
  organizationId: string | null
  productId: string | null
}

export type SubscriptionCountAggregateOutputType = {
  id: number
  polarCheckoutId: number
  polarSubscriptionId: number
  polarCustomerId: number
  status: number
  currentPeriodStart: number
  currentPeriodEnd: number
  cancelledAt: number
  createdAt: number
  updatedAt: number
  userId: number
  organizationId: number
  productId: number
  _all: number
}


export type SubscriptionMinAggregateInputType = {
  id?: true
  polarCheckoutId?: true
  polarSubscriptionId?: true
  polarCustomerId?: true
  status?: true
  currentPeriodStart?: true
  currentPeriodEnd?: true
  cancelledAt?: true
  createdAt?: true
  updatedAt?: true
  userId?: true
  organizationId?: true
  productId?: true
}

export type SubscriptionMaxAggregateInputType = {
  id?: true
  polarCheckoutId?: true
  polarSubscriptionId?: true
  polarCustomerId?: true
  status?: true
  currentPeriodStart?: true
  currentPeriodEnd?: true
  cancelledAt?: true
  createdAt?: true
  updatedAt?: true
  userId?: true
  organizationId?: true
  productId?: true
}

export type SubscriptionCountAggregateInputType = {
  id?: true
  polarCheckoutId?: true
  polarSubscriptionId?: true
  polarCustomerId?: true
  status?: true
  currentPeriodStart?: true
  currentPeriodEnd?: true
  cancelledAt?: true
  createdAt?: true
  updatedAt?: true
  userId?: true
  organizationId?: true
  productId?: true
  _all?: true
}

export type SubscriptionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Subscription to aggregate.
   */
  where?: Prisma.SubscriptionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Subscriptions to fetch.
   */
  orderBy?: Prisma.SubscriptionOrderByWithRelationInput | Prisma.SubscriptionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.SubscriptionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Subscriptions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Subscriptions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Subscriptions
  **/
  _count?: true | SubscriptionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: SubscriptionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: SubscriptionMaxAggregateInputType
}

export type GetSubscriptionAggregateType<T extends SubscriptionAggregateArgs> = {
      [P in keyof T & keyof AggregateSubscription]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateSubscription[P]>
    : Prisma.GetScalarType<T[P], AggregateSubscription[P]>
}




export type SubscriptionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.SubscriptionWhereInput
  orderBy?: Prisma.SubscriptionOrderByWithAggregationInput | Prisma.SubscriptionOrderByWithAggregationInput[]
  by: Prisma.SubscriptionScalarFieldEnum[] | Prisma.SubscriptionScalarFieldEnum
  having?: Prisma.SubscriptionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: SubscriptionCountAggregateInputType | true
  _min?: SubscriptionMinAggregateInputType
  _max?: SubscriptionMaxAggregateInputType
}

export type SubscriptionGroupByOutputType = {
  id: string
  polarCheckoutId: string | null
  polarSubscriptionId: string | null
  polarCustomerId: string | null
  status: string
  currentPeriodStart: Date | null
  currentPeriodEnd: Date | null
  cancelledAt: Date | null
  createdAt: Date
  updatedAt: Date
  userId: string
  organizationId: string
  productId: string
  _count: SubscriptionCountAggregateOutputType | null
  _min: SubscriptionMinAggregateOutputType | null
  _max: SubscriptionMaxAggregateOutputType | null
}

type GetSubscriptionGroupByPayload<T extends SubscriptionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<SubscriptionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof SubscriptionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], SubscriptionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], SubscriptionGroupByOutputType[P]>
      }
    >
  >



export type SubscriptionWhereInput = {
  AND?: Prisma.SubscriptionWhereInput | Prisma.SubscriptionWhereInput[]
  OR?: Prisma.SubscriptionWhereInput[]
  NOT?: Prisma.SubscriptionWhereInput | Prisma.SubscriptionWhereInput[]
  id?: Prisma.StringFilter<"Subscription"> | string
  polarCheckoutId?: Prisma.StringNullableFilter<"Subscription"> | string | null
  polarSubscriptionId?: Prisma.StringNullableFilter<"Subscription"> | string | null
  polarCustomerId?: Prisma.StringNullableFilter<"Subscription"> | string | null
  status?: Prisma.StringFilter<"Subscription"> | string
  currentPeriodStart?: Prisma.DateTimeNullableFilter<"Subscription"> | Date | string | null
  currentPeriodEnd?: Prisma.DateTimeNullableFilter<"Subscription"> | Date | string | null
  cancelledAt?: Prisma.DateTimeNullableFilter<"Subscription"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"Subscription"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Subscription"> | Date | string
  userId?: Prisma.StringFilter<"Subscription"> | string
  organizationId?: Prisma.StringFilter<"Subscription"> | string
  productId?: Prisma.StringFilter<"Subscription"> | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  organization?: Prisma.XOR<Prisma.OrganizationScalarRelationFilter, Prisma.OrganizationWhereInput>
  product?: Prisma.XOR<Prisma.ProductScalarRelationFilter, Prisma.ProductWhereInput>
  payments?: Prisma.PaymentListRelationFilter
}

export type SubscriptionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  polarCheckoutId?: Prisma.SortOrderInput | Prisma.SortOrder
  polarSubscriptionId?: Prisma.SortOrderInput | Prisma.SortOrder
  polarCustomerId?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  currentPeriodStart?: Prisma.SortOrderInput | Prisma.SortOrder
  currentPeriodEnd?: Prisma.SortOrderInput | Prisma.SortOrder
  cancelledAt?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  organization?: Prisma.OrganizationOrderByWithRelationInput
  product?: Prisma.ProductOrderByWithRelationInput
  payments?: Prisma.PaymentOrderByRelationAggregateInput
}

export type SubscriptionWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  polarCheckoutId?: string
  polarSubscriptionId?: string
  AND?: Prisma.SubscriptionWhereInput | Prisma.SubscriptionWhereInput[]
  OR?: Prisma.SubscriptionWhereInput[]
  NOT?: Prisma.SubscriptionWhereInput | Prisma.SubscriptionWhereInput[]
  polarCustomerId?: Prisma.StringNullableFilter<"Subscription"> | string | null
  status?: Prisma.StringFilter<"Subscription"> | string
  currentPeriodStart?: Prisma.DateTimeNullableFilter<"Subscription"> | Date | string | null
  currentPeriodEnd?: Prisma.DateTimeNullableFilter<"Subscription"> | Date | string | null
  cancelledAt?: Prisma.DateTimeNullableFilter<"Subscription"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"Subscription"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Subscription"> | Date | string
  userId?: Prisma.StringFilter<"Subscription"> | string
  organizationId?: Prisma.StringFilter<"Subscription"> | string
  productId?: Prisma.StringFilter<"Subscription"> | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  organization?: Prisma.XOR<Prisma.OrganizationScalarRelationFilter, Prisma.OrganizationWhereInput>
  product?: Prisma.XOR<Prisma.ProductScalarRelationFilter, Prisma.ProductWhereInput>
  payments?: Prisma.PaymentListRelationFilter
}, "id" | "polarCheckoutId" | "polarSubscriptionId">

export type SubscriptionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  polarCheckoutId?: Prisma.SortOrderInput | Prisma.SortOrder
  polarSubscriptionId?: Prisma.SortOrderInput | Prisma.SortOrder
  polarCustomerId?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  currentPeriodStart?: Prisma.SortOrderInput | Prisma.SortOrder
  currentPeriodEnd?: Prisma.SortOrderInput | Prisma.SortOrder
  cancelledAt?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  productId?: Prisma.SortOrder
  _count?: Prisma.SubscriptionCountOrderByAggregateInput
  _max?: Prisma.SubscriptionMaxOrderByAggregateInput
  _min?: Prisma.SubscriptionMinOrderByAggregateInput
}

export type SubscriptionScalarWhereWithAggregatesInput = {
  AND?: Prisma.SubscriptionScalarWhereWithAggregatesInput | Prisma.SubscriptionScalarWhereWithAggregatesInput[]
  OR?: Prisma.SubscriptionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.SubscriptionScalarWhereWithAggregatesInput | Prisma.SubscriptionScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Subscription"> | string
  polarCheckoutId?: Prisma.StringNullableWithAggregatesFilter<"Subscription"> | string | null
  polarSubscriptionId?: Prisma.StringNullableWithAggregatesFilter<"Subscription"> | string | null
  polarCustomerId?: Prisma.StringNullableWithAggregatesFilter<"Subscription"> | string | null
  status?: Prisma.StringWithAggregatesFilter<"Subscription"> | string
  currentPeriodStart?: Prisma.DateTimeNullableWithAggregatesFilter<"Subscription"> | Date | string | null
  currentPeriodEnd?: Prisma.DateTimeNullableWithAggregatesFilter<"Subscription"> | Date | string | null
  cancelledAt?: Prisma.DateTimeNullableWithAggregatesFilter<"Subscription"> | Date | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Subscription"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Subscription"> | Date | string
  userId?: Prisma.StringWithAggregatesFilter<"Subscription"> | string
  organizationId?: Prisma.StringWithAggregatesFilter<"Subscription"> | string
  productId?: Prisma.StringWithAggregatesFilter<"Subscription"> | string
}

export type SubscriptionCreateInput = {
  id: string
  polarCheckoutId?: string | null
  polarSubscriptionId?: string | null
  polarCustomerId?: string | null
  status: string
  currentPeriodStart?: Date | string | null
  currentPeriodEnd?: Date | string | null
  cancelledAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutSubscriptionsInput
  organization: Prisma.OrganizationCreateNestedOneWithoutSubscriptionsInput
  product: Prisma.ProductCreateNestedOneWithoutSubscriptionsInput
  payments?: Prisma.PaymentCreateNestedManyWithoutSubscriptionInput
}

export type SubscriptionUncheckedCreateInput = {
  id: string
  polarCheckoutId?: string | null
  polarSubscriptionId?: string | null
  polarCustomerId?: string | null
  status: string
  currentPeriodStart?: Date | string | null
  currentPeriodEnd?: Date | string | null
  cancelledAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  userId: string
  organizationId: string
  productId: string
  payments?: Prisma.PaymentUncheckedCreateNestedManyWithoutSubscriptionInput
}

export type SubscriptionUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  polarCheckoutId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  polarSubscriptionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  polarCustomerId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  currentPeriodStart?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  currentPeriodEnd?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  cancelledAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutSubscriptionsNestedInput
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutSubscriptionsNestedInput
  product?: Prisma.ProductUpdateOneRequiredWithoutSubscriptionsNestedInput
  payments?: Prisma.PaymentUpdateManyWithoutSubscriptionNestedInput
}

export type SubscriptionUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  polarCheckoutId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  polarSubscriptionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  polarCustomerId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  currentPeriodStart?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  currentPeriodEnd?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  cancelledAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  payments?: Prisma.PaymentUncheckedUpdateManyWithoutSubscriptionNestedInput
}

export type SubscriptionCreateManyInput = {
  id: string
  polarCheckoutId?: string | null
  polarSubscriptionId?: string | null
  polarCustomerId?: string | null
  status: string
  currentPeriodStart?: Date | string | null
  currentPeriodEnd?: Date | string | null
  cancelledAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  userId: string
  organizationId: string
  productId: string
}

export type SubscriptionUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  polarCheckoutId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  polarSubscriptionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  polarCustomerId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  currentPeriodStart?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  currentPeriodEnd?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  cancelledAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type SubscriptionUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  polarCheckoutId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  polarSubscriptionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  polarCustomerId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  currentPeriodStart?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  currentPeriodEnd?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  cancelledAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type SubscriptionListRelationFilter = {
  every?: Prisma.SubscriptionWhereInput
  some?: Prisma.SubscriptionWhereInput
  none?: Prisma.SubscriptionWhereInput
}

export type SubscriptionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type SubscriptionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  polarCheckoutId?: Prisma.SortOrder
  polarSubscriptionId?: Prisma.SortOrder
  polarCustomerId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  currentPeriodStart?: Prisma.SortOrder
  currentPeriodEnd?: Prisma.SortOrder
  cancelledAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  productId?: Prisma.SortOrder
}

export type SubscriptionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  polarCheckoutId?: Prisma.SortOrder
  polarSubscriptionId?: Prisma.SortOrder
  polarCustomerId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  currentPeriodStart?: Prisma.SortOrder
  currentPeriodEnd?: Prisma.SortOrder
  cancelledAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  productId?: Prisma.SortOrder
}

export type SubscriptionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  polarCheckoutId?: Prisma.SortOrder
  polarSubscriptionId?: Prisma.SortOrder
  polarCustomerId?: Prisma.SortOrder
  status?: Prisma.SortOrder
  currentPeriodStart?: Prisma.SortOrder
  currentPeriodEnd?: Prisma.SortOrder
  cancelledAt?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  organizationId?: Prisma.SortOrder
  productId?: Prisma.SortOrder
}

export type SubscriptionScalarRelationFilter = {
  is?: Prisma.SubscriptionWhereInput
  isNot?: Prisma.SubscriptionWhereInput
}

export type SubscriptionCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.SubscriptionCreateWithoutUserInput, Prisma.SubscriptionUncheckedCreateWithoutUserInput> | Prisma.SubscriptionCreateWithoutUserInput[] | Prisma.SubscriptionUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.SubscriptionCreateOrConnectWithoutUserInput | Prisma.SubscriptionCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.SubscriptionCreateManyUserInputEnvelope
  connect?: Prisma.SubscriptionWhereUniqueInput | Prisma.SubscriptionWhereUniqueInput[]
}

export type SubscriptionUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.SubscriptionCreateWithoutUserInput, Prisma.SubscriptionUncheckedCreateWithoutUserInput> | Prisma.SubscriptionCreateWithoutUserInput[] | Prisma.SubscriptionUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.SubscriptionCreateOrConnectWithoutUserInput | Prisma.SubscriptionCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.SubscriptionCreateManyUserInputEnvelope
  connect?: Prisma.SubscriptionWhereUniqueInput | Prisma.SubscriptionWhereUniqueInput[]
}

export type SubscriptionUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.SubscriptionCreateWithoutUserInput, Prisma.SubscriptionUncheckedCreateWithoutUserInput> | Prisma.SubscriptionCreateWithoutUserInput[] | Prisma.SubscriptionUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.SubscriptionCreateOrConnectWithoutUserInput | Prisma.SubscriptionCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.SubscriptionUpsertWithWhereUniqueWithoutUserInput | Prisma.SubscriptionUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.SubscriptionCreateManyUserInputEnvelope
  set?: Prisma.SubscriptionWhereUniqueInput | Prisma.SubscriptionWhereUniqueInput[]
  disconnect?: Prisma.SubscriptionWhereUniqueInput | Prisma.SubscriptionWhereUniqueInput[]
  delete?: Prisma.SubscriptionWhereUniqueInput | Prisma.SubscriptionWhereUniqueInput[]
  connect?: Prisma.SubscriptionWhereUniqueInput | Prisma.SubscriptionWhereUniqueInput[]
  update?: Prisma.SubscriptionUpdateWithWhereUniqueWithoutUserInput | Prisma.SubscriptionUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.SubscriptionUpdateManyWithWhereWithoutUserInput | Prisma.SubscriptionUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.SubscriptionScalarWhereInput | Prisma.SubscriptionScalarWhereInput[]
}

export type SubscriptionUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.SubscriptionCreateWithoutUserInput, Prisma.SubscriptionUncheckedCreateWithoutUserInput> | Prisma.SubscriptionCreateWithoutUserInput[] | Prisma.SubscriptionUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.SubscriptionCreateOrConnectWithoutUserInput | Prisma.SubscriptionCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.SubscriptionUpsertWithWhereUniqueWithoutUserInput | Prisma.SubscriptionUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.SubscriptionCreateManyUserInputEnvelope
  set?: Prisma.SubscriptionWhereUniqueInput | Prisma.SubscriptionWhereUniqueInput[]
  disconnect?: Prisma.SubscriptionWhereUniqueInput | Prisma.SubscriptionWhereUniqueInput[]
  delete?: Prisma.SubscriptionWhereUniqueInput | Prisma.SubscriptionWhereUniqueInput[]
  connect?: Prisma.SubscriptionWhereUniqueInput | Prisma.SubscriptionWhereUniqueInput[]
  update?: Prisma.SubscriptionUpdateWithWhereUniqueWithoutUserInput | Prisma.SubscriptionUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.SubscriptionUpdateManyWithWhereWithoutUserInput | Prisma.SubscriptionUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.SubscriptionScalarWhereInput | Prisma.SubscriptionScalarWhereInput[]
}

export type SubscriptionCreateNestedManyWithoutOrganizationInput = {
  create?: Prisma.XOR<Prisma.SubscriptionCreateWithoutOrganizationInput, Prisma.SubscriptionUncheckedCreateWithoutOrganizationInput> | Prisma.SubscriptionCreateWithoutOrganizationInput[] | Prisma.SubscriptionUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.SubscriptionCreateOrConnectWithoutOrganizationInput | Prisma.SubscriptionCreateOrConnectWithoutOrganizationInput[]
  createMany?: Prisma.SubscriptionCreateManyOrganizationInputEnvelope
  connect?: Prisma.SubscriptionWhereUniqueInput | Prisma.SubscriptionWhereUniqueInput[]
}

export type SubscriptionUncheckedCreateNestedManyWithoutOrganizationInput = {
  create?: Prisma.XOR<Prisma.SubscriptionCreateWithoutOrganizationInput, Prisma.SubscriptionUncheckedCreateWithoutOrganizationInput> | Prisma.SubscriptionCreateWithoutOrganizationInput[] | Prisma.SubscriptionUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.SubscriptionCreateOrConnectWithoutOrganizationInput | Prisma.SubscriptionCreateOrConnectWithoutOrganizationInput[]
  createMany?: Prisma.SubscriptionCreateManyOrganizationInputEnvelope
  connect?: Prisma.SubscriptionWhereUniqueInput | Prisma.SubscriptionWhereUniqueInput[]
}

export type SubscriptionUpdateManyWithoutOrganizationNestedInput = {
  create?: Prisma.XOR<Prisma.SubscriptionCreateWithoutOrganizationInput, Prisma.SubscriptionUncheckedCreateWithoutOrganizationInput> | Prisma.SubscriptionCreateWithoutOrganizationInput[] | Prisma.SubscriptionUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.SubscriptionCreateOrConnectWithoutOrganizationInput | Prisma.SubscriptionCreateOrConnectWithoutOrganizationInput[]
  upsert?: Prisma.SubscriptionUpsertWithWhereUniqueWithoutOrganizationInput | Prisma.SubscriptionUpsertWithWhereUniqueWithoutOrganizationInput[]
  createMany?: Prisma.SubscriptionCreateManyOrganizationInputEnvelope
  set?: Prisma.SubscriptionWhereUniqueInput | Prisma.SubscriptionWhereUniqueInput[]
  disconnect?: Prisma.SubscriptionWhereUniqueInput | Prisma.SubscriptionWhereUniqueInput[]
  delete?: Prisma.SubscriptionWhereUniqueInput | Prisma.SubscriptionWhereUniqueInput[]
  connect?: Prisma.SubscriptionWhereUniqueInput | Prisma.SubscriptionWhereUniqueInput[]
  update?: Prisma.SubscriptionUpdateWithWhereUniqueWithoutOrganizationInput | Prisma.SubscriptionUpdateWithWhereUniqueWithoutOrganizationInput[]
  updateMany?: Prisma.SubscriptionUpdateManyWithWhereWithoutOrganizationInput | Prisma.SubscriptionUpdateManyWithWhereWithoutOrganizationInput[]
  deleteMany?: Prisma.SubscriptionScalarWhereInput | Prisma.SubscriptionScalarWhereInput[]
}

export type SubscriptionUncheckedUpdateManyWithoutOrganizationNestedInput = {
  create?: Prisma.XOR<Prisma.SubscriptionCreateWithoutOrganizationInput, Prisma.SubscriptionUncheckedCreateWithoutOrganizationInput> | Prisma.SubscriptionCreateWithoutOrganizationInput[] | Prisma.SubscriptionUncheckedCreateWithoutOrganizationInput[]
  connectOrCreate?: Prisma.SubscriptionCreateOrConnectWithoutOrganizationInput | Prisma.SubscriptionCreateOrConnectWithoutOrganizationInput[]
  upsert?: Prisma.SubscriptionUpsertWithWhereUniqueWithoutOrganizationInput | Prisma.SubscriptionUpsertWithWhereUniqueWithoutOrganizationInput[]
  createMany?: Prisma.SubscriptionCreateManyOrganizationInputEnvelope
  set?: Prisma.SubscriptionWhereUniqueInput | Prisma.SubscriptionWhereUniqueInput[]
  disconnect?: Prisma.SubscriptionWhereUniqueInput | Prisma.SubscriptionWhereUniqueInput[]
  delete?: Prisma.SubscriptionWhereUniqueInput | Prisma.SubscriptionWhereUniqueInput[]
  connect?: Prisma.SubscriptionWhereUniqueInput | Prisma.SubscriptionWhereUniqueInput[]
  update?: Prisma.SubscriptionUpdateWithWhereUniqueWithoutOrganizationInput | Prisma.SubscriptionUpdateWithWhereUniqueWithoutOrganizationInput[]
  updateMany?: Prisma.SubscriptionUpdateManyWithWhereWithoutOrganizationInput | Prisma.SubscriptionUpdateManyWithWhereWithoutOrganizationInput[]
  deleteMany?: Prisma.SubscriptionScalarWhereInput | Prisma.SubscriptionScalarWhereInput[]
}

export type SubscriptionCreateNestedManyWithoutProductInput = {
  create?: Prisma.XOR<Prisma.SubscriptionCreateWithoutProductInput, Prisma.SubscriptionUncheckedCreateWithoutProductInput> | Prisma.SubscriptionCreateWithoutProductInput[] | Prisma.SubscriptionUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.SubscriptionCreateOrConnectWithoutProductInput | Prisma.SubscriptionCreateOrConnectWithoutProductInput[]
  createMany?: Prisma.SubscriptionCreateManyProductInputEnvelope
  connect?: Prisma.SubscriptionWhereUniqueInput | Prisma.SubscriptionWhereUniqueInput[]
}

export type SubscriptionUncheckedCreateNestedManyWithoutProductInput = {
  create?: Prisma.XOR<Prisma.SubscriptionCreateWithoutProductInput, Prisma.SubscriptionUncheckedCreateWithoutProductInput> | Prisma.SubscriptionCreateWithoutProductInput[] | Prisma.SubscriptionUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.SubscriptionCreateOrConnectWithoutProductInput | Prisma.SubscriptionCreateOrConnectWithoutProductInput[]
  createMany?: Prisma.SubscriptionCreateManyProductInputEnvelope
  connect?: Prisma.SubscriptionWhereUniqueInput | Prisma.SubscriptionWhereUniqueInput[]
}

export type SubscriptionUpdateManyWithoutProductNestedInput = {
  create?: Prisma.XOR<Prisma.SubscriptionCreateWithoutProductInput, Prisma.SubscriptionUncheckedCreateWithoutProductInput> | Prisma.SubscriptionCreateWithoutProductInput[] | Prisma.SubscriptionUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.SubscriptionCreateOrConnectWithoutProductInput | Prisma.SubscriptionCreateOrConnectWithoutProductInput[]
  upsert?: Prisma.SubscriptionUpsertWithWhereUniqueWithoutProductInput | Prisma.SubscriptionUpsertWithWhereUniqueWithoutProductInput[]
  createMany?: Prisma.SubscriptionCreateManyProductInputEnvelope
  set?: Prisma.SubscriptionWhereUniqueInput | Prisma.SubscriptionWhereUniqueInput[]
  disconnect?: Prisma.SubscriptionWhereUniqueInput | Prisma.SubscriptionWhereUniqueInput[]
  delete?: Prisma.SubscriptionWhereUniqueInput | Prisma.SubscriptionWhereUniqueInput[]
  connect?: Prisma.SubscriptionWhereUniqueInput | Prisma.SubscriptionWhereUniqueInput[]
  update?: Prisma.SubscriptionUpdateWithWhereUniqueWithoutProductInput | Prisma.SubscriptionUpdateWithWhereUniqueWithoutProductInput[]
  updateMany?: Prisma.SubscriptionUpdateManyWithWhereWithoutProductInput | Prisma.SubscriptionUpdateManyWithWhereWithoutProductInput[]
  deleteMany?: Prisma.SubscriptionScalarWhereInput | Prisma.SubscriptionScalarWhereInput[]
}

export type SubscriptionUncheckedUpdateManyWithoutProductNestedInput = {
  create?: Prisma.XOR<Prisma.SubscriptionCreateWithoutProductInput, Prisma.SubscriptionUncheckedCreateWithoutProductInput> | Prisma.SubscriptionCreateWithoutProductInput[] | Prisma.SubscriptionUncheckedCreateWithoutProductInput[]
  connectOrCreate?: Prisma.SubscriptionCreateOrConnectWithoutProductInput | Prisma.SubscriptionCreateOrConnectWithoutProductInput[]
  upsert?: Prisma.SubscriptionUpsertWithWhereUniqueWithoutProductInput | Prisma.SubscriptionUpsertWithWhereUniqueWithoutProductInput[]
  createMany?: Prisma.SubscriptionCreateManyProductInputEnvelope
  set?: Prisma.SubscriptionWhereUniqueInput | Prisma.SubscriptionWhereUniqueInput[]
  disconnect?: Prisma.SubscriptionWhereUniqueInput | Prisma.SubscriptionWhereUniqueInput[]
  delete?: Prisma.SubscriptionWhereUniqueInput | Prisma.SubscriptionWhereUniqueInput[]
  connect?: Prisma.SubscriptionWhereUniqueInput | Prisma.SubscriptionWhereUniqueInput[]
  update?: Prisma.SubscriptionUpdateWithWhereUniqueWithoutProductInput | Prisma.SubscriptionUpdateWithWhereUniqueWithoutProductInput[]
  updateMany?: Prisma.SubscriptionUpdateManyWithWhereWithoutProductInput | Prisma.SubscriptionUpdateManyWithWhereWithoutProductInput[]
  deleteMany?: Prisma.SubscriptionScalarWhereInput | Prisma.SubscriptionScalarWhereInput[]
}

export type SubscriptionCreateNestedOneWithoutPaymentsInput = {
  create?: Prisma.XOR<Prisma.SubscriptionCreateWithoutPaymentsInput, Prisma.SubscriptionUncheckedCreateWithoutPaymentsInput>
  connectOrCreate?: Prisma.SubscriptionCreateOrConnectWithoutPaymentsInput
  connect?: Prisma.SubscriptionWhereUniqueInput
}

export type SubscriptionUpdateOneRequiredWithoutPaymentsNestedInput = {
  create?: Prisma.XOR<Prisma.SubscriptionCreateWithoutPaymentsInput, Prisma.SubscriptionUncheckedCreateWithoutPaymentsInput>
  connectOrCreate?: Prisma.SubscriptionCreateOrConnectWithoutPaymentsInput
  upsert?: Prisma.SubscriptionUpsertWithoutPaymentsInput
  connect?: Prisma.SubscriptionWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.SubscriptionUpdateToOneWithWhereWithoutPaymentsInput, Prisma.SubscriptionUpdateWithoutPaymentsInput>, Prisma.SubscriptionUncheckedUpdateWithoutPaymentsInput>
}

export type SubscriptionCreateWithoutUserInput = {
  id: string
  polarCheckoutId?: string | null
  polarSubscriptionId?: string | null
  polarCustomerId?: string | null
  status: string
  currentPeriodStart?: Date | string | null
  currentPeriodEnd?: Date | string | null
  cancelledAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  organization: Prisma.OrganizationCreateNestedOneWithoutSubscriptionsInput
  product: Prisma.ProductCreateNestedOneWithoutSubscriptionsInput
  payments?: Prisma.PaymentCreateNestedManyWithoutSubscriptionInput
}

export type SubscriptionUncheckedCreateWithoutUserInput = {
  id: string
  polarCheckoutId?: string | null
  polarSubscriptionId?: string | null
  polarCustomerId?: string | null
  status: string
  currentPeriodStart?: Date | string | null
  currentPeriodEnd?: Date | string | null
  cancelledAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  organizationId: string
  productId: string
  payments?: Prisma.PaymentUncheckedCreateNestedManyWithoutSubscriptionInput
}

export type SubscriptionCreateOrConnectWithoutUserInput = {
  where: Prisma.SubscriptionWhereUniqueInput
  create: Prisma.XOR<Prisma.SubscriptionCreateWithoutUserInput, Prisma.SubscriptionUncheckedCreateWithoutUserInput>
}

export type SubscriptionCreateManyUserInputEnvelope = {
  data: Prisma.SubscriptionCreateManyUserInput | Prisma.SubscriptionCreateManyUserInput[]
}

export type SubscriptionUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.SubscriptionWhereUniqueInput
  update: Prisma.XOR<Prisma.SubscriptionUpdateWithoutUserInput, Prisma.SubscriptionUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.SubscriptionCreateWithoutUserInput, Prisma.SubscriptionUncheckedCreateWithoutUserInput>
}

export type SubscriptionUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.SubscriptionWhereUniqueInput
  data: Prisma.XOR<Prisma.SubscriptionUpdateWithoutUserInput, Prisma.SubscriptionUncheckedUpdateWithoutUserInput>
}

export type SubscriptionUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.SubscriptionScalarWhereInput
  data: Prisma.XOR<Prisma.SubscriptionUpdateManyMutationInput, Prisma.SubscriptionUncheckedUpdateManyWithoutUserInput>
}

export type SubscriptionScalarWhereInput = {
  AND?: Prisma.SubscriptionScalarWhereInput | Prisma.SubscriptionScalarWhereInput[]
  OR?: Prisma.SubscriptionScalarWhereInput[]
  NOT?: Prisma.SubscriptionScalarWhereInput | Prisma.SubscriptionScalarWhereInput[]
  id?: Prisma.StringFilter<"Subscription"> | string
  polarCheckoutId?: Prisma.StringNullableFilter<"Subscription"> | string | null
  polarSubscriptionId?: Prisma.StringNullableFilter<"Subscription"> | string | null
  polarCustomerId?: Prisma.StringNullableFilter<"Subscription"> | string | null
  status?: Prisma.StringFilter<"Subscription"> | string
  currentPeriodStart?: Prisma.DateTimeNullableFilter<"Subscription"> | Date | string | null
  currentPeriodEnd?: Prisma.DateTimeNullableFilter<"Subscription"> | Date | string | null
  cancelledAt?: Prisma.DateTimeNullableFilter<"Subscription"> | Date | string | null
  createdAt?: Prisma.DateTimeFilter<"Subscription"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Subscription"> | Date | string
  userId?: Prisma.StringFilter<"Subscription"> | string
  organizationId?: Prisma.StringFilter<"Subscription"> | string
  productId?: Prisma.StringFilter<"Subscription"> | string
}

export type SubscriptionCreateWithoutOrganizationInput = {
  id: string
  polarCheckoutId?: string | null
  polarSubscriptionId?: string | null
  polarCustomerId?: string | null
  status: string
  currentPeriodStart?: Date | string | null
  currentPeriodEnd?: Date | string | null
  cancelledAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutSubscriptionsInput
  product: Prisma.ProductCreateNestedOneWithoutSubscriptionsInput
  payments?: Prisma.PaymentCreateNestedManyWithoutSubscriptionInput
}

export type SubscriptionUncheckedCreateWithoutOrganizationInput = {
  id: string
  polarCheckoutId?: string | null
  polarSubscriptionId?: string | null
  polarCustomerId?: string | null
  status: string
  currentPeriodStart?: Date | string | null
  currentPeriodEnd?: Date | string | null
  cancelledAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  userId: string
  productId: string
  payments?: Prisma.PaymentUncheckedCreateNestedManyWithoutSubscriptionInput
}

export type SubscriptionCreateOrConnectWithoutOrganizationInput = {
  where: Prisma.SubscriptionWhereUniqueInput
  create: Prisma.XOR<Prisma.SubscriptionCreateWithoutOrganizationInput, Prisma.SubscriptionUncheckedCreateWithoutOrganizationInput>
}

export type SubscriptionCreateManyOrganizationInputEnvelope = {
  data: Prisma.SubscriptionCreateManyOrganizationInput | Prisma.SubscriptionCreateManyOrganizationInput[]
}

export type SubscriptionUpsertWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.SubscriptionWhereUniqueInput
  update: Prisma.XOR<Prisma.SubscriptionUpdateWithoutOrganizationInput, Prisma.SubscriptionUncheckedUpdateWithoutOrganizationInput>
  create: Prisma.XOR<Prisma.SubscriptionCreateWithoutOrganizationInput, Prisma.SubscriptionUncheckedCreateWithoutOrganizationInput>
}

export type SubscriptionUpdateWithWhereUniqueWithoutOrganizationInput = {
  where: Prisma.SubscriptionWhereUniqueInput
  data: Prisma.XOR<Prisma.SubscriptionUpdateWithoutOrganizationInput, Prisma.SubscriptionUncheckedUpdateWithoutOrganizationInput>
}

export type SubscriptionUpdateManyWithWhereWithoutOrganizationInput = {
  where: Prisma.SubscriptionScalarWhereInput
  data: Prisma.XOR<Prisma.SubscriptionUpdateManyMutationInput, Prisma.SubscriptionUncheckedUpdateManyWithoutOrganizationInput>
}

export type SubscriptionCreateWithoutProductInput = {
  id: string
  polarCheckoutId?: string | null
  polarSubscriptionId?: string | null
  polarCustomerId?: string | null
  status: string
  currentPeriodStart?: Date | string | null
  currentPeriodEnd?: Date | string | null
  cancelledAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutSubscriptionsInput
  organization: Prisma.OrganizationCreateNestedOneWithoutSubscriptionsInput
  payments?: Prisma.PaymentCreateNestedManyWithoutSubscriptionInput
}

export type SubscriptionUncheckedCreateWithoutProductInput = {
  id: string
  polarCheckoutId?: string | null
  polarSubscriptionId?: string | null
  polarCustomerId?: string | null
  status: string
  currentPeriodStart?: Date | string | null
  currentPeriodEnd?: Date | string | null
  cancelledAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  userId: string
  organizationId: string
  payments?: Prisma.PaymentUncheckedCreateNestedManyWithoutSubscriptionInput
}

export type SubscriptionCreateOrConnectWithoutProductInput = {
  where: Prisma.SubscriptionWhereUniqueInput
  create: Prisma.XOR<Prisma.SubscriptionCreateWithoutProductInput, Prisma.SubscriptionUncheckedCreateWithoutProductInput>
}

export type SubscriptionCreateManyProductInputEnvelope = {
  data: Prisma.SubscriptionCreateManyProductInput | Prisma.SubscriptionCreateManyProductInput[]
}

export type SubscriptionUpsertWithWhereUniqueWithoutProductInput = {
  where: Prisma.SubscriptionWhereUniqueInput
  update: Prisma.XOR<Prisma.SubscriptionUpdateWithoutProductInput, Prisma.SubscriptionUncheckedUpdateWithoutProductInput>
  create: Prisma.XOR<Prisma.SubscriptionCreateWithoutProductInput, Prisma.SubscriptionUncheckedCreateWithoutProductInput>
}

export type SubscriptionUpdateWithWhereUniqueWithoutProductInput = {
  where: Prisma.SubscriptionWhereUniqueInput
  data: Prisma.XOR<Prisma.SubscriptionUpdateWithoutProductInput, Prisma.SubscriptionUncheckedUpdateWithoutProductInput>
}

export type SubscriptionUpdateManyWithWhereWithoutProductInput = {
  where: Prisma.SubscriptionScalarWhereInput
  data: Prisma.XOR<Prisma.SubscriptionUpdateManyMutationInput, Prisma.SubscriptionUncheckedUpdateManyWithoutProductInput>
}

export type SubscriptionCreateWithoutPaymentsInput = {
  id: string
  polarCheckoutId?: string | null
  polarSubscriptionId?: string | null
  polarCustomerId?: string | null
  status: string
  currentPeriodStart?: Date | string | null
  currentPeriodEnd?: Date | string | null
  cancelledAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutSubscriptionsInput
  organization: Prisma.OrganizationCreateNestedOneWithoutSubscriptionsInput
  product: Prisma.ProductCreateNestedOneWithoutSubscriptionsInput
}

export type SubscriptionUncheckedCreateWithoutPaymentsInput = {
  id: string
  polarCheckoutId?: string | null
  polarSubscriptionId?: string | null
  polarCustomerId?: string | null
  status: string
  currentPeriodStart?: Date | string | null
  currentPeriodEnd?: Date | string | null
  cancelledAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  userId: string
  organizationId: string
  productId: string
}

export type SubscriptionCreateOrConnectWithoutPaymentsInput = {
  where: Prisma.SubscriptionWhereUniqueInput
  create: Prisma.XOR<Prisma.SubscriptionCreateWithoutPaymentsInput, Prisma.SubscriptionUncheckedCreateWithoutPaymentsInput>
}

export type SubscriptionUpsertWithoutPaymentsInput = {
  update: Prisma.XOR<Prisma.SubscriptionUpdateWithoutPaymentsInput, Prisma.SubscriptionUncheckedUpdateWithoutPaymentsInput>
  create: Prisma.XOR<Prisma.SubscriptionCreateWithoutPaymentsInput, Prisma.SubscriptionUncheckedCreateWithoutPaymentsInput>
  where?: Prisma.SubscriptionWhereInput
}

export type SubscriptionUpdateToOneWithWhereWithoutPaymentsInput = {
  where?: Prisma.SubscriptionWhereInput
  data: Prisma.XOR<Prisma.SubscriptionUpdateWithoutPaymentsInput, Prisma.SubscriptionUncheckedUpdateWithoutPaymentsInput>
}

export type SubscriptionUpdateWithoutPaymentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  polarCheckoutId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  polarSubscriptionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  polarCustomerId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  currentPeriodStart?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  currentPeriodEnd?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  cancelledAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutSubscriptionsNestedInput
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutSubscriptionsNestedInput
  product?: Prisma.ProductUpdateOneRequiredWithoutSubscriptionsNestedInput
}

export type SubscriptionUncheckedUpdateWithoutPaymentsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  polarCheckoutId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  polarSubscriptionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  polarCustomerId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  currentPeriodStart?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  currentPeriodEnd?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  cancelledAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type SubscriptionCreateManyUserInput = {
  id: string
  polarCheckoutId?: string | null
  polarSubscriptionId?: string | null
  polarCustomerId?: string | null
  status: string
  currentPeriodStart?: Date | string | null
  currentPeriodEnd?: Date | string | null
  cancelledAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  organizationId: string
  productId: string
}

export type SubscriptionUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  polarCheckoutId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  polarSubscriptionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  polarCustomerId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  currentPeriodStart?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  currentPeriodEnd?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  cancelledAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutSubscriptionsNestedInput
  product?: Prisma.ProductUpdateOneRequiredWithoutSubscriptionsNestedInput
  payments?: Prisma.PaymentUpdateManyWithoutSubscriptionNestedInput
}

export type SubscriptionUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  polarCheckoutId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  polarSubscriptionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  polarCustomerId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  currentPeriodStart?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  currentPeriodEnd?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  cancelledAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  payments?: Prisma.PaymentUncheckedUpdateManyWithoutSubscriptionNestedInput
}

export type SubscriptionUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  polarCheckoutId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  polarSubscriptionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  polarCustomerId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  currentPeriodStart?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  currentPeriodEnd?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  cancelledAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type SubscriptionCreateManyOrganizationInput = {
  id: string
  polarCheckoutId?: string | null
  polarSubscriptionId?: string | null
  polarCustomerId?: string | null
  status: string
  currentPeriodStart?: Date | string | null
  currentPeriodEnd?: Date | string | null
  cancelledAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  userId: string
  productId: string
}

export type SubscriptionUpdateWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  polarCheckoutId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  polarSubscriptionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  polarCustomerId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  currentPeriodStart?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  currentPeriodEnd?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  cancelledAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutSubscriptionsNestedInput
  product?: Prisma.ProductUpdateOneRequiredWithoutSubscriptionsNestedInput
  payments?: Prisma.PaymentUpdateManyWithoutSubscriptionNestedInput
}

export type SubscriptionUncheckedUpdateWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  polarCheckoutId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  polarSubscriptionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  polarCustomerId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  currentPeriodStart?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  currentPeriodEnd?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  cancelledAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
  payments?: Prisma.PaymentUncheckedUpdateManyWithoutSubscriptionNestedInput
}

export type SubscriptionUncheckedUpdateManyWithoutOrganizationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  polarCheckoutId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  polarSubscriptionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  polarCustomerId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  currentPeriodStart?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  currentPeriodEnd?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  cancelledAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  productId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type SubscriptionCreateManyProductInput = {
  id: string
  polarCheckoutId?: string | null
  polarSubscriptionId?: string | null
  polarCustomerId?: string | null
  status: string
  currentPeriodStart?: Date | string | null
  currentPeriodEnd?: Date | string | null
  cancelledAt?: Date | string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  userId: string
  organizationId: string
}

export type SubscriptionUpdateWithoutProductInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  polarCheckoutId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  polarSubscriptionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  polarCustomerId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  currentPeriodStart?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  currentPeriodEnd?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  cancelledAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutSubscriptionsNestedInput
  organization?: Prisma.OrganizationUpdateOneRequiredWithoutSubscriptionsNestedInput
  payments?: Prisma.PaymentUpdateManyWithoutSubscriptionNestedInput
}

export type SubscriptionUncheckedUpdateWithoutProductInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  polarCheckoutId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  polarSubscriptionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  polarCustomerId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  currentPeriodStart?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  currentPeriodEnd?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  cancelledAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
  payments?: Prisma.PaymentUncheckedUpdateManyWithoutSubscriptionNestedInput
}

export type SubscriptionUncheckedUpdateManyWithoutProductInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  polarCheckoutId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  polarSubscriptionId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  polarCustomerId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.StringFieldUpdateOperationsInput | string
  currentPeriodStart?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  currentPeriodEnd?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  cancelledAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  organizationId?: Prisma.StringFieldUpdateOperationsInput | string
}


/**
 * Count Type SubscriptionCountOutputType
 */

export type SubscriptionCountOutputType = {
  payments: number
}

export type SubscriptionCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  payments?: boolean | SubscriptionCountOutputTypeCountPaymentsArgs
}

/**
 * SubscriptionCountOutputType without action
 */
export type SubscriptionCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the SubscriptionCountOutputType
   */
  select?: Prisma.SubscriptionCountOutputTypeSelect<ExtArgs> | null
}

/**
 * SubscriptionCountOutputType without action
 */
export type SubscriptionCountOutputTypeCountPaymentsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.PaymentWhereInput
}


export type SubscriptionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  polarCheckoutId?: boolean
  polarSubscriptionId?: boolean
  polarCustomerId?: boolean
  status?: boolean
  currentPeriodStart?: boolean
  currentPeriodEnd?: boolean
  cancelledAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  userId?: boolean
  organizationId?: boolean
  productId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
  payments?: boolean | Prisma.Subscription$paymentsArgs<ExtArgs>
  _count?: boolean | Prisma.SubscriptionCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["subscription"]>

export type SubscriptionSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  polarCheckoutId?: boolean
  polarSubscriptionId?: boolean
  polarCustomerId?: boolean
  status?: boolean
  currentPeriodStart?: boolean
  currentPeriodEnd?: boolean
  cancelledAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  userId?: boolean
  organizationId?: boolean
  productId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}, ExtArgs["result"]["subscription"]>

export type SubscriptionSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  polarCheckoutId?: boolean
  polarSubscriptionId?: boolean
  polarCustomerId?: boolean
  status?: boolean
  currentPeriodStart?: boolean
  currentPeriodEnd?: boolean
  cancelledAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  userId?: boolean
  organizationId?: boolean
  productId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}, ExtArgs["result"]["subscription"]>

export type SubscriptionSelectScalar = {
  id?: boolean
  polarCheckoutId?: boolean
  polarSubscriptionId?: boolean
  polarCustomerId?: boolean
  status?: boolean
  currentPeriodStart?: boolean
  currentPeriodEnd?: boolean
  cancelledAt?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  userId?: boolean
  organizationId?: boolean
  productId?: boolean
}

export type SubscriptionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "polarCheckoutId" | "polarSubscriptionId" | "polarCustomerId" | "status" | "currentPeriodStart" | "currentPeriodEnd" | "cancelledAt" | "createdAt" | "updatedAt" | "userId" | "organizationId" | "productId", ExtArgs["result"]["subscription"]>
export type SubscriptionInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
  payments?: boolean | Prisma.Subscription$paymentsArgs<ExtArgs>
  _count?: boolean | Prisma.SubscriptionCountOutputTypeDefaultArgs<ExtArgs>
}
export type SubscriptionIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}
export type SubscriptionIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  organization?: boolean | Prisma.OrganizationDefaultArgs<ExtArgs>
  product?: boolean | Prisma.ProductDefaultArgs<ExtArgs>
}

export type $SubscriptionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Subscription"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    organization: Prisma.$OrganizationPayload<ExtArgs>
    product: Prisma.$ProductPayload<ExtArgs>
    payments: Prisma.$PaymentPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    polarCheckoutId: string | null
    polarSubscriptionId: string | null
    polarCustomerId: string | null
    status: string
    currentPeriodStart: Date | null
    currentPeriodEnd: Date | null
    cancelledAt: Date | null
    createdAt: Date
    updatedAt: Date
    userId: string
    organizationId: string
    productId: string
  }, ExtArgs["result"]["subscription"]>
  composites: {}
}

export type SubscriptionGetPayload<S extends boolean | null | undefined | SubscriptionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$SubscriptionPayload, S>

export type SubscriptionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<SubscriptionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: SubscriptionCountAggregateInputType | true
  }

export interface SubscriptionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Subscription'], meta: { name: 'Subscription' } }
  /**
   * Find zero or one Subscription that matches the filter.
   * @param {SubscriptionFindUniqueArgs} args - Arguments to find a Subscription
   * @example
   * // Get one Subscription
   * const subscription = await prisma.subscription.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends SubscriptionFindUniqueArgs>(args: Prisma.SelectSubset<T, SubscriptionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__SubscriptionClient<runtime.Types.Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Subscription that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {SubscriptionFindUniqueOrThrowArgs} args - Arguments to find a Subscription
   * @example
   * // Get one Subscription
   * const subscription = await prisma.subscription.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends SubscriptionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, SubscriptionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__SubscriptionClient<runtime.Types.Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Subscription that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubscriptionFindFirstArgs} args - Arguments to find a Subscription
   * @example
   * // Get one Subscription
   * const subscription = await prisma.subscription.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends SubscriptionFindFirstArgs>(args?: Prisma.SelectSubset<T, SubscriptionFindFirstArgs<ExtArgs>>): Prisma.Prisma__SubscriptionClient<runtime.Types.Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Subscription that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubscriptionFindFirstOrThrowArgs} args - Arguments to find a Subscription
   * @example
   * // Get one Subscription
   * const subscription = await prisma.subscription.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends SubscriptionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, SubscriptionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__SubscriptionClient<runtime.Types.Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Subscriptions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubscriptionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Subscriptions
   * const subscriptions = await prisma.subscription.findMany()
   * 
   * // Get first 10 Subscriptions
   * const subscriptions = await prisma.subscription.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const subscriptionWithIdOnly = await prisma.subscription.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends SubscriptionFindManyArgs>(args?: Prisma.SelectSubset<T, SubscriptionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Subscription.
   * @param {SubscriptionCreateArgs} args - Arguments to create a Subscription.
   * @example
   * // Create one Subscription
   * const Subscription = await prisma.subscription.create({
   *   data: {
   *     // ... data to create a Subscription
   *   }
   * })
   * 
   */
  create<T extends SubscriptionCreateArgs>(args: Prisma.SelectSubset<T, SubscriptionCreateArgs<ExtArgs>>): Prisma.Prisma__SubscriptionClient<runtime.Types.Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Subscriptions.
   * @param {SubscriptionCreateManyArgs} args - Arguments to create many Subscriptions.
   * @example
   * // Create many Subscriptions
   * const subscription = await prisma.subscription.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends SubscriptionCreateManyArgs>(args?: Prisma.SelectSubset<T, SubscriptionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Subscriptions and returns the data saved in the database.
   * @param {SubscriptionCreateManyAndReturnArgs} args - Arguments to create many Subscriptions.
   * @example
   * // Create many Subscriptions
   * const subscription = await prisma.subscription.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Subscriptions and only return the `id`
   * const subscriptionWithIdOnly = await prisma.subscription.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends SubscriptionCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, SubscriptionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Subscription.
   * @param {SubscriptionDeleteArgs} args - Arguments to delete one Subscription.
   * @example
   * // Delete one Subscription
   * const Subscription = await prisma.subscription.delete({
   *   where: {
   *     // ... filter to delete one Subscription
   *   }
   * })
   * 
   */
  delete<T extends SubscriptionDeleteArgs>(args: Prisma.SelectSubset<T, SubscriptionDeleteArgs<ExtArgs>>): Prisma.Prisma__SubscriptionClient<runtime.Types.Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Subscription.
   * @param {SubscriptionUpdateArgs} args - Arguments to update one Subscription.
   * @example
   * // Update one Subscription
   * const subscription = await prisma.subscription.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends SubscriptionUpdateArgs>(args: Prisma.SelectSubset<T, SubscriptionUpdateArgs<ExtArgs>>): Prisma.Prisma__SubscriptionClient<runtime.Types.Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Subscriptions.
   * @param {SubscriptionDeleteManyArgs} args - Arguments to filter Subscriptions to delete.
   * @example
   * // Delete a few Subscriptions
   * const { count } = await prisma.subscription.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends SubscriptionDeleteManyArgs>(args?: Prisma.SelectSubset<T, SubscriptionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Subscriptions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubscriptionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Subscriptions
   * const subscription = await prisma.subscription.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends SubscriptionUpdateManyArgs>(args: Prisma.SelectSubset<T, SubscriptionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Subscriptions and returns the data updated in the database.
   * @param {SubscriptionUpdateManyAndReturnArgs} args - Arguments to update many Subscriptions.
   * @example
   * // Update many Subscriptions
   * const subscription = await prisma.subscription.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Subscriptions and only return the `id`
   * const subscriptionWithIdOnly = await prisma.subscription.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends SubscriptionUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, SubscriptionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Subscription.
   * @param {SubscriptionUpsertArgs} args - Arguments to update or create a Subscription.
   * @example
   * // Update or create a Subscription
   * const subscription = await prisma.subscription.upsert({
   *   create: {
   *     // ... data to create a Subscription
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Subscription we want to update
   *   }
   * })
   */
  upsert<T extends SubscriptionUpsertArgs>(args: Prisma.SelectSubset<T, SubscriptionUpsertArgs<ExtArgs>>): Prisma.Prisma__SubscriptionClient<runtime.Types.Result.GetResult<Prisma.$SubscriptionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Subscriptions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubscriptionCountArgs} args - Arguments to filter Subscriptions to count.
   * @example
   * // Count the number of Subscriptions
   * const count = await prisma.subscription.count({
   *   where: {
   *     // ... the filter for the Subscriptions we want to count
   *   }
   * })
  **/
  count<T extends SubscriptionCountArgs>(
    args?: Prisma.Subset<T, SubscriptionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], SubscriptionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Subscription.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubscriptionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends SubscriptionAggregateArgs>(args: Prisma.Subset<T, SubscriptionAggregateArgs>): Prisma.PrismaPromise<GetSubscriptionAggregateType<T>>

  /**
   * Group by Subscription.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {SubscriptionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends SubscriptionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: SubscriptionGroupByArgs['orderBy'] }
      : { orderBy?: SubscriptionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, SubscriptionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSubscriptionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Subscription model
 */
readonly fields: SubscriptionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Subscription.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__SubscriptionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  organization<T extends Prisma.OrganizationDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.OrganizationDefaultArgs<ExtArgs>>): Prisma.Prisma__OrganizationClient<runtime.Types.Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  product<T extends Prisma.ProductDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ProductDefaultArgs<ExtArgs>>): Prisma.Prisma__ProductClient<runtime.Types.Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  payments<T extends Prisma.Subscription$paymentsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Subscription$paymentsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$PaymentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Subscription model
 */
export interface SubscriptionFieldRefs {
  readonly id: Prisma.FieldRef<"Subscription", 'String'>
  readonly polarCheckoutId: Prisma.FieldRef<"Subscription", 'String'>
  readonly polarSubscriptionId: Prisma.FieldRef<"Subscription", 'String'>
  readonly polarCustomerId: Prisma.FieldRef<"Subscription", 'String'>
  readonly status: Prisma.FieldRef<"Subscription", 'String'>
  readonly currentPeriodStart: Prisma.FieldRef<"Subscription", 'DateTime'>
  readonly currentPeriodEnd: Prisma.FieldRef<"Subscription", 'DateTime'>
  readonly cancelledAt: Prisma.FieldRef<"Subscription", 'DateTime'>
  readonly createdAt: Prisma.FieldRef<"Subscription", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Subscription", 'DateTime'>
  readonly userId: Prisma.FieldRef<"Subscription", 'String'>
  readonly organizationId: Prisma.FieldRef<"Subscription", 'String'>
  readonly productId: Prisma.FieldRef<"Subscription", 'String'>
}
    

// Custom InputTypes
/**
 * Subscription findUnique
 */
export type SubscriptionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Subscription
   */
  select?: Prisma.SubscriptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Subscription
   */
  omit?: Prisma.SubscriptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubscriptionInclude<ExtArgs> | null
  /**
   * Filter, which Subscription to fetch.
   */
  where: Prisma.SubscriptionWhereUniqueInput
}

/**
 * Subscription findUniqueOrThrow
 */
export type SubscriptionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Subscription
   */
  select?: Prisma.SubscriptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Subscription
   */
  omit?: Prisma.SubscriptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubscriptionInclude<ExtArgs> | null
  /**
   * Filter, which Subscription to fetch.
   */
  where: Prisma.SubscriptionWhereUniqueInput
}

/**
 * Subscription findFirst
 */
export type SubscriptionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Subscription
   */
  select?: Prisma.SubscriptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Subscription
   */
  omit?: Prisma.SubscriptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubscriptionInclude<ExtArgs> | null
  /**
   * Filter, which Subscription to fetch.
   */
  where?: Prisma.SubscriptionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Subscriptions to fetch.
   */
  orderBy?: Prisma.SubscriptionOrderByWithRelationInput | Prisma.SubscriptionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Subscriptions.
   */
  cursor?: Prisma.SubscriptionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Subscriptions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Subscriptions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Subscriptions.
   */
  distinct?: Prisma.SubscriptionScalarFieldEnum | Prisma.SubscriptionScalarFieldEnum[]
}

/**
 * Subscription findFirstOrThrow
 */
export type SubscriptionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Subscription
   */
  select?: Prisma.SubscriptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Subscription
   */
  omit?: Prisma.SubscriptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubscriptionInclude<ExtArgs> | null
  /**
   * Filter, which Subscription to fetch.
   */
  where?: Prisma.SubscriptionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Subscriptions to fetch.
   */
  orderBy?: Prisma.SubscriptionOrderByWithRelationInput | Prisma.SubscriptionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Subscriptions.
   */
  cursor?: Prisma.SubscriptionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Subscriptions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Subscriptions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Subscriptions.
   */
  distinct?: Prisma.SubscriptionScalarFieldEnum | Prisma.SubscriptionScalarFieldEnum[]
}

/**
 * Subscription findMany
 */
export type SubscriptionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Subscription
   */
  select?: Prisma.SubscriptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Subscription
   */
  omit?: Prisma.SubscriptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubscriptionInclude<ExtArgs> | null
  /**
   * Filter, which Subscriptions to fetch.
   */
  where?: Prisma.SubscriptionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Subscriptions to fetch.
   */
  orderBy?: Prisma.SubscriptionOrderByWithRelationInput | Prisma.SubscriptionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Subscriptions.
   */
  cursor?: Prisma.SubscriptionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Subscriptions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Subscriptions.
   */
  skip?: number
  distinct?: Prisma.SubscriptionScalarFieldEnum | Prisma.SubscriptionScalarFieldEnum[]
}

/**
 * Subscription create
 */
export type SubscriptionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Subscription
   */
  select?: Prisma.SubscriptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Subscription
   */
  omit?: Prisma.SubscriptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubscriptionInclude<ExtArgs> | null
  /**
   * The data needed to create a Subscription.
   */
  data: Prisma.XOR<Prisma.SubscriptionCreateInput, Prisma.SubscriptionUncheckedCreateInput>
}

/**
 * Subscription createMany
 */
export type SubscriptionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Subscriptions.
   */
  data: Prisma.SubscriptionCreateManyInput | Prisma.SubscriptionCreateManyInput[]
}

/**
 * Subscription createManyAndReturn
 */
export type SubscriptionCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Subscription
   */
  select?: Prisma.SubscriptionSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Subscription
   */
  omit?: Prisma.SubscriptionOmit<ExtArgs> | null
  /**
   * The data used to create many Subscriptions.
   */
  data: Prisma.SubscriptionCreateManyInput | Prisma.SubscriptionCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubscriptionIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Subscription update
 */
export type SubscriptionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Subscription
   */
  select?: Prisma.SubscriptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Subscription
   */
  omit?: Prisma.SubscriptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubscriptionInclude<ExtArgs> | null
  /**
   * The data needed to update a Subscription.
   */
  data: Prisma.XOR<Prisma.SubscriptionUpdateInput, Prisma.SubscriptionUncheckedUpdateInput>
  /**
   * Choose, which Subscription to update.
   */
  where: Prisma.SubscriptionWhereUniqueInput
}

/**
 * Subscription updateMany
 */
export type SubscriptionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Subscriptions.
   */
  data: Prisma.XOR<Prisma.SubscriptionUpdateManyMutationInput, Prisma.SubscriptionUncheckedUpdateManyInput>
  /**
   * Filter which Subscriptions to update
   */
  where?: Prisma.SubscriptionWhereInput
  /**
   * Limit how many Subscriptions to update.
   */
  limit?: number
}

/**
 * Subscription updateManyAndReturn
 */
export type SubscriptionUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Subscription
   */
  select?: Prisma.SubscriptionSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Subscription
   */
  omit?: Prisma.SubscriptionOmit<ExtArgs> | null
  /**
   * The data used to update Subscriptions.
   */
  data: Prisma.XOR<Prisma.SubscriptionUpdateManyMutationInput, Prisma.SubscriptionUncheckedUpdateManyInput>
  /**
   * Filter which Subscriptions to update
   */
  where?: Prisma.SubscriptionWhereInput
  /**
   * Limit how many Subscriptions to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubscriptionIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Subscription upsert
 */
export type SubscriptionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Subscription
   */
  select?: Prisma.SubscriptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Subscription
   */
  omit?: Prisma.SubscriptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubscriptionInclude<ExtArgs> | null
  /**
   * The filter to search for the Subscription to update in case it exists.
   */
  where: Prisma.SubscriptionWhereUniqueInput
  /**
   * In case the Subscription found by the `where` argument doesn't exist, create a new Subscription with this data.
   */
  create: Prisma.XOR<Prisma.SubscriptionCreateInput, Prisma.SubscriptionUncheckedCreateInput>
  /**
   * In case the Subscription was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.SubscriptionUpdateInput, Prisma.SubscriptionUncheckedUpdateInput>
}

/**
 * Subscription delete
 */
export type SubscriptionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Subscription
   */
  select?: Prisma.SubscriptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Subscription
   */
  omit?: Prisma.SubscriptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubscriptionInclude<ExtArgs> | null
  /**
   * Filter which Subscription to delete.
   */
  where: Prisma.SubscriptionWhereUniqueInput
}

/**
 * Subscription deleteMany
 */
export type SubscriptionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Subscriptions to delete
   */
  where?: Prisma.SubscriptionWhereInput
  /**
   * Limit how many Subscriptions to delete.
   */
  limit?: number
}

/**
 * Subscription.payments
 */
export type Subscription$paymentsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Payment
   */
  select?: Prisma.PaymentSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Payment
   */
  omit?: Prisma.PaymentOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.PaymentInclude<ExtArgs> | null
  where?: Prisma.PaymentWhereInput
  orderBy?: Prisma.PaymentOrderByWithRelationInput | Prisma.PaymentOrderByWithRelationInput[]
  cursor?: Prisma.PaymentWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.PaymentScalarFieldEnum | Prisma.PaymentScalarFieldEnum[]
}

/**
 * Subscription without action
 */
export type SubscriptionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Subscription
   */
  select?: Prisma.SubscriptionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Subscription
   */
  omit?: Prisma.SubscriptionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.SubscriptionInclude<ExtArgs> | null
}
