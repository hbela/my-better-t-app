
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Provider` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Provider
 * 
 */
export type ProviderModel = runtime.Types.Result.DefaultSelection<Prisma.$ProviderPayload>

export type AggregateProvider = {
  _count: ProviderCountAggregateOutputType | null
  _min: ProviderMinAggregateOutputType | null
  _max: ProviderMaxAggregateOutputType | null
}

export type ProviderMinAggregateOutputType = {
  id: string | null
  userId: string | null
  departmentId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ProviderMaxAggregateOutputType = {
  id: string | null
  userId: string | null
  departmentId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ProviderCountAggregateOutputType = {
  id: number
  userId: number
  departmentId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ProviderMinAggregateInputType = {
  id?: true
  userId?: true
  departmentId?: true
  createdAt?: true
  updatedAt?: true
}

export type ProviderMaxAggregateInputType = {
  id?: true
  userId?: true
  departmentId?: true
  createdAt?: true
  updatedAt?: true
}

export type ProviderCountAggregateInputType = {
  id?: true
  userId?: true
  departmentId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ProviderAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Provider to aggregate.
   */
  where?: Prisma.ProviderWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Providers to fetch.
   */
  orderBy?: Prisma.ProviderOrderByWithRelationInput | Prisma.ProviderOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ProviderWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Providers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Providers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Providers
  **/
  _count?: true | ProviderCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ProviderMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ProviderMaxAggregateInputType
}

export type GetProviderAggregateType<T extends ProviderAggregateArgs> = {
      [P in keyof T & keyof AggregateProvider]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateProvider[P]>
    : Prisma.GetScalarType<T[P], AggregateProvider[P]>
}




export type ProviderGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ProviderWhereInput
  orderBy?: Prisma.ProviderOrderByWithAggregationInput | Prisma.ProviderOrderByWithAggregationInput[]
  by: Prisma.ProviderScalarFieldEnum[] | Prisma.ProviderScalarFieldEnum
  having?: Prisma.ProviderScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ProviderCountAggregateInputType | true
  _min?: ProviderMinAggregateInputType
  _max?: ProviderMaxAggregateInputType
}

export type ProviderGroupByOutputType = {
  id: string
  userId: string
  departmentId: string
  createdAt: Date
  updatedAt: Date
  _count: ProviderCountAggregateOutputType | null
  _min: ProviderMinAggregateOutputType | null
  _max: ProviderMaxAggregateOutputType | null
}

type GetProviderGroupByPayload<T extends ProviderGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ProviderGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ProviderGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ProviderGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ProviderGroupByOutputType[P]>
      }
    >
  >



export type ProviderWhereInput = {
  AND?: Prisma.ProviderWhereInput | Prisma.ProviderWhereInput[]
  OR?: Prisma.ProviderWhereInput[]
  NOT?: Prisma.ProviderWhereInput | Prisma.ProviderWhereInput[]
  id?: Prisma.StringFilter<"Provider"> | string
  userId?: Prisma.StringFilter<"Provider"> | string
  departmentId?: Prisma.StringFilter<"Provider"> | string
  createdAt?: Prisma.DateTimeFilter<"Provider"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Provider"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  department?: Prisma.XOR<Prisma.DepartmentScalarRelationFilter, Prisma.DepartmentWhereInput>
  events?: Prisma.EventListRelationFilter
}

export type ProviderOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  departmentId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  department?: Prisma.DepartmentOrderByWithRelationInput
  events?: Prisma.EventOrderByRelationAggregateInput
}

export type ProviderWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  userId_departmentId?: Prisma.ProviderUserIdDepartmentIdCompoundUniqueInput
  AND?: Prisma.ProviderWhereInput | Prisma.ProviderWhereInput[]
  OR?: Prisma.ProviderWhereInput[]
  NOT?: Prisma.ProviderWhereInput | Prisma.ProviderWhereInput[]
  userId?: Prisma.StringFilter<"Provider"> | string
  departmentId?: Prisma.StringFilter<"Provider"> | string
  createdAt?: Prisma.DateTimeFilter<"Provider"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Provider"> | Date | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  department?: Prisma.XOR<Prisma.DepartmentScalarRelationFilter, Prisma.DepartmentWhereInput>
  events?: Prisma.EventListRelationFilter
}, "id" | "userId_departmentId">

export type ProviderOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  departmentId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ProviderCountOrderByAggregateInput
  _max?: Prisma.ProviderMaxOrderByAggregateInput
  _min?: Prisma.ProviderMinOrderByAggregateInput
}

export type ProviderScalarWhereWithAggregatesInput = {
  AND?: Prisma.ProviderScalarWhereWithAggregatesInput | Prisma.ProviderScalarWhereWithAggregatesInput[]
  OR?: Prisma.ProviderScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ProviderScalarWhereWithAggregatesInput | Prisma.ProviderScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Provider"> | string
  userId?: Prisma.StringWithAggregatesFilter<"Provider"> | string
  departmentId?: Prisma.StringWithAggregatesFilter<"Provider"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Provider"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Provider"> | Date | string
}

export type ProviderCreateInput = {
  id: string
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutProvidersInput
  department: Prisma.DepartmentCreateNestedOneWithoutProvidersInput
  events?: Prisma.EventCreateNestedManyWithoutProviderInput
}

export type ProviderUncheckedCreateInput = {
  id: string
  userId: string
  departmentId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  events?: Prisma.EventUncheckedCreateNestedManyWithoutProviderInput
}

export type ProviderUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutProvidersNestedInput
  department?: Prisma.DepartmentUpdateOneRequiredWithoutProvidersNestedInput
  events?: Prisma.EventUpdateManyWithoutProviderNestedInput
}

export type ProviderUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  departmentId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  events?: Prisma.EventUncheckedUpdateManyWithoutProviderNestedInput
}

export type ProviderCreateManyInput = {
  id: string
  userId: string
  departmentId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProviderUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProviderUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  departmentId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProviderListRelationFilter = {
  every?: Prisma.ProviderWhereInput
  some?: Prisma.ProviderWhereInput
  none?: Prisma.ProviderWhereInput
}

export type ProviderOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ProviderUserIdDepartmentIdCompoundUniqueInput = {
  userId: string
  departmentId: string
}

export type ProviderCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  departmentId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ProviderMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  departmentId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ProviderMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  departmentId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ProviderScalarRelationFilter = {
  is?: Prisma.ProviderWhereInput
  isNot?: Prisma.ProviderWhereInput
}

export type ProviderCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.ProviderCreateWithoutUserInput, Prisma.ProviderUncheckedCreateWithoutUserInput> | Prisma.ProviderCreateWithoutUserInput[] | Prisma.ProviderUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ProviderCreateOrConnectWithoutUserInput | Prisma.ProviderCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.ProviderCreateManyUserInputEnvelope
  connect?: Prisma.ProviderWhereUniqueInput | Prisma.ProviderWhereUniqueInput[]
}

export type ProviderUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.ProviderCreateWithoutUserInput, Prisma.ProviderUncheckedCreateWithoutUserInput> | Prisma.ProviderCreateWithoutUserInput[] | Prisma.ProviderUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ProviderCreateOrConnectWithoutUserInput | Prisma.ProviderCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.ProviderCreateManyUserInputEnvelope
  connect?: Prisma.ProviderWhereUniqueInput | Prisma.ProviderWhereUniqueInput[]
}

export type ProviderUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.ProviderCreateWithoutUserInput, Prisma.ProviderUncheckedCreateWithoutUserInput> | Prisma.ProviderCreateWithoutUserInput[] | Prisma.ProviderUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ProviderCreateOrConnectWithoutUserInput | Prisma.ProviderCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.ProviderUpsertWithWhereUniqueWithoutUserInput | Prisma.ProviderUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.ProviderCreateManyUserInputEnvelope
  set?: Prisma.ProviderWhereUniqueInput | Prisma.ProviderWhereUniqueInput[]
  disconnect?: Prisma.ProviderWhereUniqueInput | Prisma.ProviderWhereUniqueInput[]
  delete?: Prisma.ProviderWhereUniqueInput | Prisma.ProviderWhereUniqueInput[]
  connect?: Prisma.ProviderWhereUniqueInput | Prisma.ProviderWhereUniqueInput[]
  update?: Prisma.ProviderUpdateWithWhereUniqueWithoutUserInput | Prisma.ProviderUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.ProviderUpdateManyWithWhereWithoutUserInput | Prisma.ProviderUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.ProviderScalarWhereInput | Prisma.ProviderScalarWhereInput[]
}

export type ProviderUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.ProviderCreateWithoutUserInput, Prisma.ProviderUncheckedCreateWithoutUserInput> | Prisma.ProviderCreateWithoutUserInput[] | Prisma.ProviderUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.ProviderCreateOrConnectWithoutUserInput | Prisma.ProviderCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.ProviderUpsertWithWhereUniqueWithoutUserInput | Prisma.ProviderUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.ProviderCreateManyUserInputEnvelope
  set?: Prisma.ProviderWhereUniqueInput | Prisma.ProviderWhereUniqueInput[]
  disconnect?: Prisma.ProviderWhereUniqueInput | Prisma.ProviderWhereUniqueInput[]
  delete?: Prisma.ProviderWhereUniqueInput | Prisma.ProviderWhereUniqueInput[]
  connect?: Prisma.ProviderWhereUniqueInput | Prisma.ProviderWhereUniqueInput[]
  update?: Prisma.ProviderUpdateWithWhereUniqueWithoutUserInput | Prisma.ProviderUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.ProviderUpdateManyWithWhereWithoutUserInput | Prisma.ProviderUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.ProviderScalarWhereInput | Prisma.ProviderScalarWhereInput[]
}

export type ProviderCreateNestedManyWithoutDepartmentInput = {
  create?: Prisma.XOR<Prisma.ProviderCreateWithoutDepartmentInput, Prisma.ProviderUncheckedCreateWithoutDepartmentInput> | Prisma.ProviderCreateWithoutDepartmentInput[] | Prisma.ProviderUncheckedCreateWithoutDepartmentInput[]
  connectOrCreate?: Prisma.ProviderCreateOrConnectWithoutDepartmentInput | Prisma.ProviderCreateOrConnectWithoutDepartmentInput[]
  createMany?: Prisma.ProviderCreateManyDepartmentInputEnvelope
  connect?: Prisma.ProviderWhereUniqueInput | Prisma.ProviderWhereUniqueInput[]
}

export type ProviderUncheckedCreateNestedManyWithoutDepartmentInput = {
  create?: Prisma.XOR<Prisma.ProviderCreateWithoutDepartmentInput, Prisma.ProviderUncheckedCreateWithoutDepartmentInput> | Prisma.ProviderCreateWithoutDepartmentInput[] | Prisma.ProviderUncheckedCreateWithoutDepartmentInput[]
  connectOrCreate?: Prisma.ProviderCreateOrConnectWithoutDepartmentInput | Prisma.ProviderCreateOrConnectWithoutDepartmentInput[]
  createMany?: Prisma.ProviderCreateManyDepartmentInputEnvelope
  connect?: Prisma.ProviderWhereUniqueInput | Prisma.ProviderWhereUniqueInput[]
}

export type ProviderUpdateManyWithoutDepartmentNestedInput = {
  create?: Prisma.XOR<Prisma.ProviderCreateWithoutDepartmentInput, Prisma.ProviderUncheckedCreateWithoutDepartmentInput> | Prisma.ProviderCreateWithoutDepartmentInput[] | Prisma.ProviderUncheckedCreateWithoutDepartmentInput[]
  connectOrCreate?: Prisma.ProviderCreateOrConnectWithoutDepartmentInput | Prisma.ProviderCreateOrConnectWithoutDepartmentInput[]
  upsert?: Prisma.ProviderUpsertWithWhereUniqueWithoutDepartmentInput | Prisma.ProviderUpsertWithWhereUniqueWithoutDepartmentInput[]
  createMany?: Prisma.ProviderCreateManyDepartmentInputEnvelope
  set?: Prisma.ProviderWhereUniqueInput | Prisma.ProviderWhereUniqueInput[]
  disconnect?: Prisma.ProviderWhereUniqueInput | Prisma.ProviderWhereUniqueInput[]
  delete?: Prisma.ProviderWhereUniqueInput | Prisma.ProviderWhereUniqueInput[]
  connect?: Prisma.ProviderWhereUniqueInput | Prisma.ProviderWhereUniqueInput[]
  update?: Prisma.ProviderUpdateWithWhereUniqueWithoutDepartmentInput | Prisma.ProviderUpdateWithWhereUniqueWithoutDepartmentInput[]
  updateMany?: Prisma.ProviderUpdateManyWithWhereWithoutDepartmentInput | Prisma.ProviderUpdateManyWithWhereWithoutDepartmentInput[]
  deleteMany?: Prisma.ProviderScalarWhereInput | Prisma.ProviderScalarWhereInput[]
}

export type ProviderUncheckedUpdateManyWithoutDepartmentNestedInput = {
  create?: Prisma.XOR<Prisma.ProviderCreateWithoutDepartmentInput, Prisma.ProviderUncheckedCreateWithoutDepartmentInput> | Prisma.ProviderCreateWithoutDepartmentInput[] | Prisma.ProviderUncheckedCreateWithoutDepartmentInput[]
  connectOrCreate?: Prisma.ProviderCreateOrConnectWithoutDepartmentInput | Prisma.ProviderCreateOrConnectWithoutDepartmentInput[]
  upsert?: Prisma.ProviderUpsertWithWhereUniqueWithoutDepartmentInput | Prisma.ProviderUpsertWithWhereUniqueWithoutDepartmentInput[]
  createMany?: Prisma.ProviderCreateManyDepartmentInputEnvelope
  set?: Prisma.ProviderWhereUniqueInput | Prisma.ProviderWhereUniqueInput[]
  disconnect?: Prisma.ProviderWhereUniqueInput | Prisma.ProviderWhereUniqueInput[]
  delete?: Prisma.ProviderWhereUniqueInput | Prisma.ProviderWhereUniqueInput[]
  connect?: Prisma.ProviderWhereUniqueInput | Prisma.ProviderWhereUniqueInput[]
  update?: Prisma.ProviderUpdateWithWhereUniqueWithoutDepartmentInput | Prisma.ProviderUpdateWithWhereUniqueWithoutDepartmentInput[]
  updateMany?: Prisma.ProviderUpdateManyWithWhereWithoutDepartmentInput | Prisma.ProviderUpdateManyWithWhereWithoutDepartmentInput[]
  deleteMany?: Prisma.ProviderScalarWhereInput | Prisma.ProviderScalarWhereInput[]
}

export type ProviderCreateNestedOneWithoutEventsInput = {
  create?: Prisma.XOR<Prisma.ProviderCreateWithoutEventsInput, Prisma.ProviderUncheckedCreateWithoutEventsInput>
  connectOrCreate?: Prisma.ProviderCreateOrConnectWithoutEventsInput
  connect?: Prisma.ProviderWhereUniqueInput
}

export type ProviderUpdateOneRequiredWithoutEventsNestedInput = {
  create?: Prisma.XOR<Prisma.ProviderCreateWithoutEventsInput, Prisma.ProviderUncheckedCreateWithoutEventsInput>
  connectOrCreate?: Prisma.ProviderCreateOrConnectWithoutEventsInput
  upsert?: Prisma.ProviderUpsertWithoutEventsInput
  connect?: Prisma.ProviderWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ProviderUpdateToOneWithWhereWithoutEventsInput, Prisma.ProviderUpdateWithoutEventsInput>, Prisma.ProviderUncheckedUpdateWithoutEventsInput>
}

export type ProviderCreateWithoutUserInput = {
  id: string
  createdAt?: Date | string
  updatedAt?: Date | string
  department: Prisma.DepartmentCreateNestedOneWithoutProvidersInput
  events?: Prisma.EventCreateNestedManyWithoutProviderInput
}

export type ProviderUncheckedCreateWithoutUserInput = {
  id: string
  departmentId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  events?: Prisma.EventUncheckedCreateNestedManyWithoutProviderInput
}

export type ProviderCreateOrConnectWithoutUserInput = {
  where: Prisma.ProviderWhereUniqueInput
  create: Prisma.XOR<Prisma.ProviderCreateWithoutUserInput, Prisma.ProviderUncheckedCreateWithoutUserInput>
}

export type ProviderCreateManyUserInputEnvelope = {
  data: Prisma.ProviderCreateManyUserInput | Prisma.ProviderCreateManyUserInput[]
}

export type ProviderUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.ProviderWhereUniqueInput
  update: Prisma.XOR<Prisma.ProviderUpdateWithoutUserInput, Prisma.ProviderUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.ProviderCreateWithoutUserInput, Prisma.ProviderUncheckedCreateWithoutUserInput>
}

export type ProviderUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.ProviderWhereUniqueInput
  data: Prisma.XOR<Prisma.ProviderUpdateWithoutUserInput, Prisma.ProviderUncheckedUpdateWithoutUserInput>
}

export type ProviderUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.ProviderScalarWhereInput
  data: Prisma.XOR<Prisma.ProviderUpdateManyMutationInput, Prisma.ProviderUncheckedUpdateManyWithoutUserInput>
}

export type ProviderScalarWhereInput = {
  AND?: Prisma.ProviderScalarWhereInput | Prisma.ProviderScalarWhereInput[]
  OR?: Prisma.ProviderScalarWhereInput[]
  NOT?: Prisma.ProviderScalarWhereInput | Prisma.ProviderScalarWhereInput[]
  id?: Prisma.StringFilter<"Provider"> | string
  userId?: Prisma.StringFilter<"Provider"> | string
  departmentId?: Prisma.StringFilter<"Provider"> | string
  createdAt?: Prisma.DateTimeFilter<"Provider"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Provider"> | Date | string
}

export type ProviderCreateWithoutDepartmentInput = {
  id: string
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutProvidersInput
  events?: Prisma.EventCreateNestedManyWithoutProviderInput
}

export type ProviderUncheckedCreateWithoutDepartmentInput = {
  id: string
  userId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  events?: Prisma.EventUncheckedCreateNestedManyWithoutProviderInput
}

export type ProviderCreateOrConnectWithoutDepartmentInput = {
  where: Prisma.ProviderWhereUniqueInput
  create: Prisma.XOR<Prisma.ProviderCreateWithoutDepartmentInput, Prisma.ProviderUncheckedCreateWithoutDepartmentInput>
}

export type ProviderCreateManyDepartmentInputEnvelope = {
  data: Prisma.ProviderCreateManyDepartmentInput | Prisma.ProviderCreateManyDepartmentInput[]
}

export type ProviderUpsertWithWhereUniqueWithoutDepartmentInput = {
  where: Prisma.ProviderWhereUniqueInput
  update: Prisma.XOR<Prisma.ProviderUpdateWithoutDepartmentInput, Prisma.ProviderUncheckedUpdateWithoutDepartmentInput>
  create: Prisma.XOR<Prisma.ProviderCreateWithoutDepartmentInput, Prisma.ProviderUncheckedCreateWithoutDepartmentInput>
}

export type ProviderUpdateWithWhereUniqueWithoutDepartmentInput = {
  where: Prisma.ProviderWhereUniqueInput
  data: Prisma.XOR<Prisma.ProviderUpdateWithoutDepartmentInput, Prisma.ProviderUncheckedUpdateWithoutDepartmentInput>
}

export type ProviderUpdateManyWithWhereWithoutDepartmentInput = {
  where: Prisma.ProviderScalarWhereInput
  data: Prisma.XOR<Prisma.ProviderUpdateManyMutationInput, Prisma.ProviderUncheckedUpdateManyWithoutDepartmentInput>
}

export type ProviderCreateWithoutEventsInput = {
  id: string
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutProvidersInput
  department: Prisma.DepartmentCreateNestedOneWithoutProvidersInput
}

export type ProviderUncheckedCreateWithoutEventsInput = {
  id: string
  userId: string
  departmentId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProviderCreateOrConnectWithoutEventsInput = {
  where: Prisma.ProviderWhereUniqueInput
  create: Prisma.XOR<Prisma.ProviderCreateWithoutEventsInput, Prisma.ProviderUncheckedCreateWithoutEventsInput>
}

export type ProviderUpsertWithoutEventsInput = {
  update: Prisma.XOR<Prisma.ProviderUpdateWithoutEventsInput, Prisma.ProviderUncheckedUpdateWithoutEventsInput>
  create: Prisma.XOR<Prisma.ProviderCreateWithoutEventsInput, Prisma.ProviderUncheckedCreateWithoutEventsInput>
  where?: Prisma.ProviderWhereInput
}

export type ProviderUpdateToOneWithWhereWithoutEventsInput = {
  where?: Prisma.ProviderWhereInput
  data: Prisma.XOR<Prisma.ProviderUpdateWithoutEventsInput, Prisma.ProviderUncheckedUpdateWithoutEventsInput>
}

export type ProviderUpdateWithoutEventsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutProvidersNestedInput
  department?: Prisma.DepartmentUpdateOneRequiredWithoutProvidersNestedInput
}

export type ProviderUncheckedUpdateWithoutEventsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  departmentId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProviderCreateManyUserInput = {
  id: string
  departmentId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProviderUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  department?: Prisma.DepartmentUpdateOneRequiredWithoutProvidersNestedInput
  events?: Prisma.EventUpdateManyWithoutProviderNestedInput
}

export type ProviderUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  departmentId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  events?: Prisma.EventUncheckedUpdateManyWithoutProviderNestedInput
}

export type ProviderUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  departmentId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ProviderCreateManyDepartmentInput = {
  id: string
  userId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ProviderUpdateWithoutDepartmentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutProvidersNestedInput
  events?: Prisma.EventUpdateManyWithoutProviderNestedInput
}

export type ProviderUncheckedUpdateWithoutDepartmentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  events?: Prisma.EventUncheckedUpdateManyWithoutProviderNestedInput
}

export type ProviderUncheckedUpdateManyWithoutDepartmentInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type ProviderCountOutputType
 */

export type ProviderCountOutputType = {
  events: number
}

export type ProviderCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  events?: boolean | ProviderCountOutputTypeCountEventsArgs
}

/**
 * ProviderCountOutputType without action
 */
export type ProviderCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ProviderCountOutputType
   */
  select?: Prisma.ProviderCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ProviderCountOutputType without action
 */
export type ProviderCountOutputTypeCountEventsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.EventWhereInput
}


export type ProviderSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  departmentId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  department?: boolean | Prisma.DepartmentDefaultArgs<ExtArgs>
  events?: boolean | Prisma.Provider$eventsArgs<ExtArgs>
  _count?: boolean | Prisma.ProviderCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["provider"]>

export type ProviderSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  departmentId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  department?: boolean | Prisma.DepartmentDefaultArgs<ExtArgs>
}, ExtArgs["result"]["provider"]>

export type ProviderSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  userId?: boolean
  departmentId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  department?: boolean | Prisma.DepartmentDefaultArgs<ExtArgs>
}, ExtArgs["result"]["provider"]>

export type ProviderSelectScalar = {
  id?: boolean
  userId?: boolean
  departmentId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ProviderOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "userId" | "departmentId" | "createdAt" | "updatedAt", ExtArgs["result"]["provider"]>
export type ProviderInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  department?: boolean | Prisma.DepartmentDefaultArgs<ExtArgs>
  events?: boolean | Prisma.Provider$eventsArgs<ExtArgs>
  _count?: boolean | Prisma.ProviderCountOutputTypeDefaultArgs<ExtArgs>
}
export type ProviderIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  department?: boolean | Prisma.DepartmentDefaultArgs<ExtArgs>
}
export type ProviderIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  department?: boolean | Prisma.DepartmentDefaultArgs<ExtArgs>
}

export type $ProviderPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Provider"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    department: Prisma.$DepartmentPayload<ExtArgs>
    events: Prisma.$EventPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    userId: string
    departmentId: string
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["provider"]>
  composites: {}
}

export type ProviderGetPayload<S extends boolean | null | undefined | ProviderDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ProviderPayload, S>

export type ProviderCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ProviderFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ProviderCountAggregateInputType | true
  }

export interface ProviderDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Provider'], meta: { name: 'Provider' } }
  /**
   * Find zero or one Provider that matches the filter.
   * @param {ProviderFindUniqueArgs} args - Arguments to find a Provider
   * @example
   * // Get one Provider
   * const provider = await prisma.provider.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ProviderFindUniqueArgs>(args: Prisma.SelectSubset<T, ProviderFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ProviderClient<runtime.Types.Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Provider that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ProviderFindUniqueOrThrowArgs} args - Arguments to find a Provider
   * @example
   * // Get one Provider
   * const provider = await prisma.provider.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ProviderFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ProviderFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProviderClient<runtime.Types.Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Provider that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProviderFindFirstArgs} args - Arguments to find a Provider
   * @example
   * // Get one Provider
   * const provider = await prisma.provider.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ProviderFindFirstArgs>(args?: Prisma.SelectSubset<T, ProviderFindFirstArgs<ExtArgs>>): Prisma.Prisma__ProviderClient<runtime.Types.Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Provider that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProviderFindFirstOrThrowArgs} args - Arguments to find a Provider
   * @example
   * // Get one Provider
   * const provider = await prisma.provider.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ProviderFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ProviderFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ProviderClient<runtime.Types.Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Providers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProviderFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Providers
   * const providers = await prisma.provider.findMany()
   * 
   * // Get first 10 Providers
   * const providers = await prisma.provider.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const providerWithIdOnly = await prisma.provider.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ProviderFindManyArgs>(args?: Prisma.SelectSubset<T, ProviderFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Provider.
   * @param {ProviderCreateArgs} args - Arguments to create a Provider.
   * @example
   * // Create one Provider
   * const Provider = await prisma.provider.create({
   *   data: {
   *     // ... data to create a Provider
   *   }
   * })
   * 
   */
  create<T extends ProviderCreateArgs>(args: Prisma.SelectSubset<T, ProviderCreateArgs<ExtArgs>>): Prisma.Prisma__ProviderClient<runtime.Types.Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Providers.
   * @param {ProviderCreateManyArgs} args - Arguments to create many Providers.
   * @example
   * // Create many Providers
   * const provider = await prisma.provider.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ProviderCreateManyArgs>(args?: Prisma.SelectSubset<T, ProviderCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Providers and returns the data saved in the database.
   * @param {ProviderCreateManyAndReturnArgs} args - Arguments to create many Providers.
   * @example
   * // Create many Providers
   * const provider = await prisma.provider.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Providers and only return the `id`
   * const providerWithIdOnly = await prisma.provider.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ProviderCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ProviderCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Provider.
   * @param {ProviderDeleteArgs} args - Arguments to delete one Provider.
   * @example
   * // Delete one Provider
   * const Provider = await prisma.provider.delete({
   *   where: {
   *     // ... filter to delete one Provider
   *   }
   * })
   * 
   */
  delete<T extends ProviderDeleteArgs>(args: Prisma.SelectSubset<T, ProviderDeleteArgs<ExtArgs>>): Prisma.Prisma__ProviderClient<runtime.Types.Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Provider.
   * @param {ProviderUpdateArgs} args - Arguments to update one Provider.
   * @example
   * // Update one Provider
   * const provider = await prisma.provider.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ProviderUpdateArgs>(args: Prisma.SelectSubset<T, ProviderUpdateArgs<ExtArgs>>): Prisma.Prisma__ProviderClient<runtime.Types.Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Providers.
   * @param {ProviderDeleteManyArgs} args - Arguments to filter Providers to delete.
   * @example
   * // Delete a few Providers
   * const { count } = await prisma.provider.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ProviderDeleteManyArgs>(args?: Prisma.SelectSubset<T, ProviderDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Providers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProviderUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Providers
   * const provider = await prisma.provider.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ProviderUpdateManyArgs>(args: Prisma.SelectSubset<T, ProviderUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Providers and returns the data updated in the database.
   * @param {ProviderUpdateManyAndReturnArgs} args - Arguments to update many Providers.
   * @example
   * // Update many Providers
   * const provider = await prisma.provider.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Providers and only return the `id`
   * const providerWithIdOnly = await prisma.provider.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ProviderUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ProviderUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Provider.
   * @param {ProviderUpsertArgs} args - Arguments to update or create a Provider.
   * @example
   * // Update or create a Provider
   * const provider = await prisma.provider.upsert({
   *   create: {
   *     // ... data to create a Provider
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Provider we want to update
   *   }
   * })
   */
  upsert<T extends ProviderUpsertArgs>(args: Prisma.SelectSubset<T, ProviderUpsertArgs<ExtArgs>>): Prisma.Prisma__ProviderClient<runtime.Types.Result.GetResult<Prisma.$ProviderPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Providers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProviderCountArgs} args - Arguments to filter Providers to count.
   * @example
   * // Count the number of Providers
   * const count = await prisma.provider.count({
   *   where: {
   *     // ... the filter for the Providers we want to count
   *   }
   * })
  **/
  count<T extends ProviderCountArgs>(
    args?: Prisma.Subset<T, ProviderCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ProviderCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Provider.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProviderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ProviderAggregateArgs>(args: Prisma.Subset<T, ProviderAggregateArgs>): Prisma.PrismaPromise<GetProviderAggregateType<T>>

  /**
   * Group by Provider.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ProviderGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ProviderGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ProviderGroupByArgs['orderBy'] }
      : { orderBy?: ProviderGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ProviderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProviderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Provider model
 */
readonly fields: ProviderFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Provider.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ProviderClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  department<T extends Prisma.DepartmentDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.DepartmentDefaultArgs<ExtArgs>>): Prisma.Prisma__DepartmentClient<runtime.Types.Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  events<T extends Prisma.Provider$eventsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Provider$eventsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$EventPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Provider model
 */
export interface ProviderFieldRefs {
  readonly id: Prisma.FieldRef<"Provider", 'String'>
  readonly userId: Prisma.FieldRef<"Provider", 'String'>
  readonly departmentId: Prisma.FieldRef<"Provider", 'String'>
  readonly createdAt: Prisma.FieldRef<"Provider", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Provider", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Provider findUnique
 */
export type ProviderFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Provider
   */
  select?: Prisma.ProviderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Provider
   */
  omit?: Prisma.ProviderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProviderInclude<ExtArgs> | null
  /**
   * Filter, which Provider to fetch.
   */
  where: Prisma.ProviderWhereUniqueInput
}

/**
 * Provider findUniqueOrThrow
 */
export type ProviderFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Provider
   */
  select?: Prisma.ProviderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Provider
   */
  omit?: Prisma.ProviderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProviderInclude<ExtArgs> | null
  /**
   * Filter, which Provider to fetch.
   */
  where: Prisma.ProviderWhereUniqueInput
}

/**
 * Provider findFirst
 */
export type ProviderFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Provider
   */
  select?: Prisma.ProviderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Provider
   */
  omit?: Prisma.ProviderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProviderInclude<ExtArgs> | null
  /**
   * Filter, which Provider to fetch.
   */
  where?: Prisma.ProviderWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Providers to fetch.
   */
  orderBy?: Prisma.ProviderOrderByWithRelationInput | Prisma.ProviderOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Providers.
   */
  cursor?: Prisma.ProviderWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Providers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Providers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Providers.
   */
  distinct?: Prisma.ProviderScalarFieldEnum | Prisma.ProviderScalarFieldEnum[]
}

/**
 * Provider findFirstOrThrow
 */
export type ProviderFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Provider
   */
  select?: Prisma.ProviderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Provider
   */
  omit?: Prisma.ProviderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProviderInclude<ExtArgs> | null
  /**
   * Filter, which Provider to fetch.
   */
  where?: Prisma.ProviderWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Providers to fetch.
   */
  orderBy?: Prisma.ProviderOrderByWithRelationInput | Prisma.ProviderOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Providers.
   */
  cursor?: Prisma.ProviderWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Providers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Providers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Providers.
   */
  distinct?: Prisma.ProviderScalarFieldEnum | Prisma.ProviderScalarFieldEnum[]
}

/**
 * Provider findMany
 */
export type ProviderFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Provider
   */
  select?: Prisma.ProviderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Provider
   */
  omit?: Prisma.ProviderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProviderInclude<ExtArgs> | null
  /**
   * Filter, which Providers to fetch.
   */
  where?: Prisma.ProviderWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Providers to fetch.
   */
  orderBy?: Prisma.ProviderOrderByWithRelationInput | Prisma.ProviderOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Providers.
   */
  cursor?: Prisma.ProviderWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Providers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Providers.
   */
  skip?: number
  distinct?: Prisma.ProviderScalarFieldEnum | Prisma.ProviderScalarFieldEnum[]
}

/**
 * Provider create
 */
export type ProviderCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Provider
   */
  select?: Prisma.ProviderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Provider
   */
  omit?: Prisma.ProviderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProviderInclude<ExtArgs> | null
  /**
   * The data needed to create a Provider.
   */
  data: Prisma.XOR<Prisma.ProviderCreateInput, Prisma.ProviderUncheckedCreateInput>
}

/**
 * Provider createMany
 */
export type ProviderCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Providers.
   */
  data: Prisma.ProviderCreateManyInput | Prisma.ProviderCreateManyInput[]
}

/**
 * Provider createManyAndReturn
 */
export type ProviderCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Provider
   */
  select?: Prisma.ProviderSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Provider
   */
  omit?: Prisma.ProviderOmit<ExtArgs> | null
  /**
   * The data used to create many Providers.
   */
  data: Prisma.ProviderCreateManyInput | Prisma.ProviderCreateManyInput[]
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProviderIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Provider update
 */
export type ProviderUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Provider
   */
  select?: Prisma.ProviderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Provider
   */
  omit?: Prisma.ProviderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProviderInclude<ExtArgs> | null
  /**
   * The data needed to update a Provider.
   */
  data: Prisma.XOR<Prisma.ProviderUpdateInput, Prisma.ProviderUncheckedUpdateInput>
  /**
   * Choose, which Provider to update.
   */
  where: Prisma.ProviderWhereUniqueInput
}

/**
 * Provider updateMany
 */
export type ProviderUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Providers.
   */
  data: Prisma.XOR<Prisma.ProviderUpdateManyMutationInput, Prisma.ProviderUncheckedUpdateManyInput>
  /**
   * Filter which Providers to update
   */
  where?: Prisma.ProviderWhereInput
  /**
   * Limit how many Providers to update.
   */
  limit?: number
}

/**
 * Provider updateManyAndReturn
 */
export type ProviderUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Provider
   */
  select?: Prisma.ProviderSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Provider
   */
  omit?: Prisma.ProviderOmit<ExtArgs> | null
  /**
   * The data used to update Providers.
   */
  data: Prisma.XOR<Prisma.ProviderUpdateManyMutationInput, Prisma.ProviderUncheckedUpdateManyInput>
  /**
   * Filter which Providers to update
   */
  where?: Prisma.ProviderWhereInput
  /**
   * Limit how many Providers to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProviderIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Provider upsert
 */
export type ProviderUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Provider
   */
  select?: Prisma.ProviderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Provider
   */
  omit?: Prisma.ProviderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProviderInclude<ExtArgs> | null
  /**
   * The filter to search for the Provider to update in case it exists.
   */
  where: Prisma.ProviderWhereUniqueInput
  /**
   * In case the Provider found by the `where` argument doesn't exist, create a new Provider with this data.
   */
  create: Prisma.XOR<Prisma.ProviderCreateInput, Prisma.ProviderUncheckedCreateInput>
  /**
   * In case the Provider was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ProviderUpdateInput, Prisma.ProviderUncheckedUpdateInput>
}

/**
 * Provider delete
 */
export type ProviderDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Provider
   */
  select?: Prisma.ProviderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Provider
   */
  omit?: Prisma.ProviderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProviderInclude<ExtArgs> | null
  /**
   * Filter which Provider to delete.
   */
  where: Prisma.ProviderWhereUniqueInput
}

/**
 * Provider deleteMany
 */
export type ProviderDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Providers to delete
   */
  where?: Prisma.ProviderWhereInput
  /**
   * Limit how many Providers to delete.
   */
  limit?: number
}

/**
 * Provider.events
 */
export type Provider$eventsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Event
   */
  select?: Prisma.EventSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Event
   */
  omit?: Prisma.EventOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.EventInclude<ExtArgs> | null
  where?: Prisma.EventWhereInput
  orderBy?: Prisma.EventOrderByWithRelationInput | Prisma.EventOrderByWithRelationInput[]
  cursor?: Prisma.EventWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.EventScalarFieldEnum | Prisma.EventScalarFieldEnum[]
}

/**
 * Provider without action
 */
export type ProviderDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Provider
   */
  select?: Prisma.ProviderSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Provider
   */
  omit?: Prisma.ProviderOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ProviderInclude<ExtArgs> | null
}
